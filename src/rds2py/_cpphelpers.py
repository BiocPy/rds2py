# DO NOT MODIFY: this is automatically generated by the cpptypes

import os
import ctypes as ct


def _catch_errors(f):
    def wrapper(*args):
        errcode = ct.c_int32(0)
        errmsg = ct.c_char_p(0)
        output = f(*args, ct.byref(errcode), ct.byref(errmsg))
        if errcode.value != 0:
            msg = errmsg.value.decode("ascii")
            lib.free_error_message(errmsg)
            raise RuntimeError(msg)
        return output

    return wrapper


# TODO: surely there's a better way than whatever this is.
dirname = os.path.dirname(os.path.abspath(__file__))
contents = os.listdir(dirname)
lib = None
for x in contents:
    if x.startswith("_core") and not x.endswith("py"):
        lib = ct.CDLL(os.path.join(dirname, x))
        break

if lib is None:
    raise ImportError("failed to find the _core.* module")

lib.free_error_message.argtypes = [ct.POINTER(ct.c_char_p)]

lib.py_py_parser_extract_robject.restype = ct.c_void_p
lib.py_py_parser_extract_robject.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int32),
    ct.POINTER(ct.c_char_p),
]

lib.py_py_parser_rds_file.restype = ct.c_void_p
